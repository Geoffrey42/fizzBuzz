// Code generated by go-swagger; DO NOT EDIT.

package fizzbuzz

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetAPIFizzbuzzHandlerFunc turns a function with the right signature into a get API fizzbuzz handler
type GetAPIFizzbuzzHandlerFunc func(GetAPIFizzbuzzParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAPIFizzbuzzHandlerFunc) Handle(params GetAPIFizzbuzzParams) middleware.Responder {
	return fn(params)
}

// GetAPIFizzbuzzHandler interface for that can handle valid get API fizzbuzz params
type GetAPIFizzbuzzHandler interface {
	Handle(GetAPIFizzbuzzParams) middleware.Responder
}

// NewGetAPIFizzbuzz creates a new http.Handler for the get API fizzbuzz operation
func NewGetAPIFizzbuzz(ctx *middleware.Context, handler GetAPIFizzbuzzHandler) *GetAPIFizzbuzz {
	return &GetAPIFizzbuzz{Context: ctx, Handler: handler}
}

/*GetAPIFizzbuzz swagger:route GET /api/fizzbuzz fizzbuzz getApiFizzbuzz

Perform fizz-buzz given specific parameters.

*/
type GetAPIFizzbuzz struct {
	Context *middleware.Context
	Handler GetAPIFizzbuzzHandler
}

func (o *GetAPIFizzbuzz) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetAPIFizzbuzzParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
