// Code generated by go-swagger; DO NOT EDIT.

package stats

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetAPIStatsHandlerFunc turns a function with the right signature into a get API stats handler
type GetAPIStatsHandlerFunc func(GetAPIStatsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAPIStatsHandlerFunc) Handle(params GetAPIStatsParams) middleware.Responder {
	return fn(params)
}

// GetAPIStatsHandler interface for that can handle valid get API stats params
type GetAPIStatsHandler interface {
	Handle(GetAPIStatsParams) middleware.Responder
}

// NewGetAPIStats creates a new http.Handler for the get API stats operation
func NewGetAPIStats(ctx *middleware.Context, handler GetAPIStatsHandler) *GetAPIStats {
	return &GetAPIStats{Context: ctx, Handler: handler}
}

/*GetAPIStats swagger:route GET /api/stats stats getApiStats

Fetch the most frequent request on '/api/fizzbuzz', its parameters and number of hits.

*/
type GetAPIStats struct {
	Context *middleware.Context
	Handler GetAPIStatsHandler
}

func (o *GetAPIStats) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetAPIStatsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
