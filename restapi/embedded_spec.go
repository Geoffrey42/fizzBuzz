// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The original fizz-buzz consists in writing all numbers from 1 to 100, and just replacing all multiples of 3 by 'fizz', all multiples of 5 by 'buzz', and all multiples of 15 by 'fizzbuzz'. This server exposes two main endpoint, one to return the fizz-buzz string given some parameters and the other to return stats about the most used request. This API is part of LeBonCoin's technical test.",
    "title": "A simple fizz-buzz REST server",
    "version": "1.0.0"
  },
  "paths": {
    "/api/fizzbuzz": {
      "get": {
        "tags": [
          "fizzbuzz"
        ],
        "summary": "Perform fizz-buzz given specific parameters.",
        "parameters": [
          {
            "type": "integer",
            "format": "int",
            "description": "A number whose multiples will be replaced by str1.",
            "name": "int1",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int",
            "description": "A number whose multiples will be replaced by str2.",
            "name": "int2",
            "in": "query",
            "required": true
          },
          {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "format": "int",
            "description": "The maximum number to operate on with the fizz-buzz. Must be between 1 \u0026 100.",
            "name": "limit",
            "in": "query",
            "required": true
          },
          {
            "minLength": 1,
            "type": "string",
            "description": "String that will replace int1's multiples.",
            "name": "str1",
            "in": "query",
            "required": true
          },
          {
            "minLength": 1,
            "type": "string",
            "description": "String that will replace int2's multiples.",
            "name": "str2",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Fizz-buzz-like string based on given parameters.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "422": {
            "description": "Request contains illegal characters",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/api/stats": {
      "get": {
        "tags": [
          "stats"
        ],
        "summary": "Fetch the most frequent request on '/api/fizzbuzz', its parameters and number of hits.",
        "responses": {
          "200": {
            "description": "A statistics endpoint allowing users to know what the most frequent request has been.",
            "schema": {
              "$ref": "#/definitions/stat"
            }
          },
          "404": {
            "description": "No stored request can be found.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "Database isn't available.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "stat": {
      "type": "object",
      "properties": {
        "hit": {
          "type": "integer",
          "format": "int"
        },
        "int1": {
          "type": "integer",
          "format": "int"
        },
        "int2": {
          "type": "integer",
          "format": "int"
        },
        "limit": {
          "type": "integer",
          "format": "int"
        },
        "str1": {
          "type": "string"
        },
        "str2": {
          "type": "string"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The original fizz-buzz consists in writing all numbers from 1 to 100, and just replacing all multiples of 3 by 'fizz', all multiples of 5 by 'buzz', and all multiples of 15 by 'fizzbuzz'. This server exposes two main endpoint, one to return the fizz-buzz string given some parameters and the other to return stats about the most used request. This API is part of LeBonCoin's technical test.",
    "title": "A simple fizz-buzz REST server",
    "version": "1.0.0"
  },
  "paths": {
    "/api/fizzbuzz": {
      "get": {
        "tags": [
          "fizzbuzz"
        ],
        "summary": "Perform fizz-buzz given specific parameters.",
        "parameters": [
          {
            "type": "integer",
            "format": "int",
            "description": "A number whose multiples will be replaced by str1.",
            "name": "int1",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int",
            "description": "A number whose multiples will be replaced by str2.",
            "name": "int2",
            "in": "query",
            "required": true
          },
          {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "format": "int",
            "description": "The maximum number to operate on with the fizz-buzz. Must be between 1 \u0026 100.",
            "name": "limit",
            "in": "query",
            "required": true
          },
          {
            "minLength": 1,
            "type": "string",
            "description": "String that will replace int1's multiples.",
            "name": "str1",
            "in": "query",
            "required": true
          },
          {
            "minLength": 1,
            "type": "string",
            "description": "String that will replace int2's multiples.",
            "name": "str2",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Fizz-buzz-like string based on given parameters.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "422": {
            "description": "Request contains illegal characters",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/api/stats": {
      "get": {
        "tags": [
          "stats"
        ],
        "summary": "Fetch the most frequent request on '/api/fizzbuzz', its parameters and number of hits.",
        "responses": {
          "200": {
            "description": "A statistics endpoint allowing users to know what the most frequent request has been.",
            "schema": {
              "$ref": "#/definitions/stat"
            }
          },
          "404": {
            "description": "No stored request can be found.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "Database isn't available.",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "stat": {
      "type": "object",
      "properties": {
        "hit": {
          "type": "integer",
          "format": "int"
        },
        "int1": {
          "type": "integer",
          "format": "int"
        },
        "int2": {
          "type": "integer",
          "format": "int"
        },
        "limit": {
          "type": "integer",
          "format": "int"
        },
        "str1": {
          "type": "string"
        },
        "str2": {
          "type": "string"
        }
      }
    }
  }
}`))
}
